[{"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/index.js":"1","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/App.js":"2","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/blockly/robotCommandGenerator.js":"3","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/blockly/customBlocks.js":"4","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/interpreter/useCommandQueue.js":"5","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/interpreter/executeCommand.js":"6","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/three/Scene.js":"7","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/state/levelContext.js":"8","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/components/Onboarding.js":"9","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/state/agentContext.js":"10","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/three/useAgent.js":"11","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/three/Map.js":"12","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/three/Camera.js":"13","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/components/GestureRecognition.js":"14","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/utils/indexedDB.js":"15","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/state/gestureContext.js":"16"},{"size":219,"mtime":1761207486715,"results":"17","hashOfConfig":"18"},{"size":3184,"mtime":1761284837223,"results":"19","hashOfConfig":"18"},{"size":2672,"mtime":1761207486714,"results":"20","hashOfConfig":"18"},{"size":4352,"mtime":1761207486714,"results":"21","hashOfConfig":"18"},{"size":2658,"mtime":1761207486715,"results":"22","hashOfConfig":"18"},{"size":2626,"mtime":1761207486715,"results":"23","hashOfConfig":"18"},{"size":8578,"mtime":1761207486716,"results":"24","hashOfConfig":"18"},{"size":5438,"mtime":1761207486715,"results":"25","hashOfConfig":"18"},{"size":3800,"mtime":1761282361117,"results":"26","hashOfConfig":"18"},{"size":321,"mtime":1761207486715,"results":"27","hashOfConfig":"18"},{"size":6356,"mtime":1761207486716,"results":"28","hashOfConfig":"18"},{"size":2355,"mtime":1761207486716,"results":"29","hashOfConfig":"18"},{"size":8316,"mtime":1761207486715,"results":"30","hashOfConfig":"18"},{"size":14760,"mtime":1761284111751,"results":"31","hashOfConfig":"18"},{"size":2778,"mtime":1761282361117,"results":"32","hashOfConfig":"18"},{"size":10618,"mtime":1761284111751,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1u6ov8j",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/index.js",[],["68","69"],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/App.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/blockly/robotCommandGenerator.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/blockly/customBlocks.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/interpreter/useCommandQueue.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/interpreter/executeCommand.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/three/Scene.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/state/levelContext.js",["70"],"import React from \"react\";\nimport * as THREE from \"three\";\n\nexport const GRID_W = 8;\nexport const GRID_H = 8;\n\nconst CELL_SIZE = 1.0;\nconst HALF = CELL_SIZE / 2;\n\nexport const CELL = {\n  EMPTY: \"empty\",\n  WALL: \"wall\",\n  PICKUP: \"pickup\",\n  DROPOFF: \"dropoff\",\n};\n\nexport function makeInitialGrid() {\n  const g = Array.from({ length: GRID_H }, () =>\n    Array.from({ length: GRID_W }, () => ({ type: CELL.EMPTY }))\n  );\n  g[2][3] = { type: CELL.WALL, meta: { height: 1.2 } };\n  g[1][1] = { type: CELL.PICKUP, meta: { id: \"P1\" } };\n  g[6][6] = { type: CELL.DROPOFF, meta: { id: \"D1\" } };\n  g[7][2] = { type: CELL.WALL };\n  g[0][4] = { type: CELL.WALL };\n  g[3][7] = { type: CELL.WALL };\n  return g;\n}\n\nfunction isEmptyXml(xmlConfig) {\n  const trimmedXml = xmlConfig.trim();\n  \n  // Проверяем через regexp, что XML содержит только теги <xml></xml> без вложенных блоков\n  // Разрешаем параметры в тегах, но не вложенные блоки\n  const emptyXmlRegex = /^<xml[^>]*><\\/xml>$/;\n  \n  return trimmedXml === '' || emptyXmlRegex.test(trimmedXml);\n}\n\nconst LevelContext = React.createContext(null);\n\nexport function LevelProvider({ children, levelId = 1 }) {\n  const [grid, setGrid] = React.useState(makeInitialGrid);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [xmlAlgorithmConfig, setXmlAlgorithmConfig] = React.useState('<xml></xml>');\n  const [isLevelCompleted, setIsLevelCompleted] = React.useState(false);\n\n  // Инициализация уровня\n  React.useEffect(() => {\n    setIsLoading(true);\n    setGrid(makeInitialGrid());\n    setIsLoading(false);\n  }, [levelId]);\n\n  // Утилиты, которые используют значения из контекста\n  const contextUtils = {\n    // Упрощенная версия gridToWorld\n    gridToWorld: (x, y) => new THREE.Vector3(\n      x * CELL_SIZE + HALF,\n      0,\n      (GRID_H - 1 - y) * CELL_SIZE + HALF\n    ),\n    \n    // Упрощенная версия getCellType\n    getCellType: (i, j) => {\n      if (i < 0 || i >= GRID_W || j < 0 || j >= GRID_H) return null;\n      return grid[j][i]?.type ?? null;\n    },\n    \n    // Упрощенная версия isAdjacentToCellType\n    isAdjacentToCellType: (i, j, type) => {\n      const neighbors = [\n        { i: i + 1, j },\n        { i: i - 1, j },\n        { i, j: j + 1 },\n        { i, j: j - 1 }\n      ];\n      for (const { i: ni, j: nj } of neighbors) {\n        if (ni < 0 || ni >= GRID_W || nj < 0 || nj >= GRID_H) continue;\n        const cellType = grid[nj][ni]?.type ?? null;\n        if (cellType === type) return true;\n      }\n      return false;\n    },\n    \n    // Упрощенные версии isAdjacentToPickup и isAdjacentToDropoff\n    isAdjacentToPickup: (i, j) => contextUtils.isAdjacentToCellType(i, j, CELL.PICKUP),\n    isAdjacentToDropoff: (i, j) => contextUtils.isAdjacentToCellType(i, j, CELL.DROPOFF),\n    \n    // Упрощенная версия canEnterWorld\n    canEnterWorld: (x, y) => {\n      const i = Math.round(x + GRID_W / 2 - 0.5);\n      const zCell = Math.round(y + GRID_H / 2 - 0.5);\n      const j = GRID_H - 1 - zCell;\n      if (i < 0 || i >= GRID_W || j < 0 || j >= GRID_H) return false;\n      const cell = grid[j][i];\n      return cell.type !== CELL.WALL;\n    },\n    \n    // Упрощенная версия canEnterLogical\n    canEnterLogical: (i, j) => {\n      if (i < 0 || i >= GRID_W || j < 0 || j >= GRID_H) return false;\n      const cell = grid[j][i];\n      return cell.type !== CELL.WALL;\n    },\n    \n    // Упрощенная версия isWallAt\n    isWallAt: (i, j) => {\n      if (i < 0 || i >= GRID_W || j < 0 || j >= GRID_H) return false;\n      const cellType = grid[j][i]?.type ?? null;\n      return cellType === CELL.WALL;\n    },\n\n    // Сброс уровня к начальному состоянию\n    resetLevel: () => {\n      setGrid(makeInitialGrid());\n      setXmlAlgorithmConfig('<xml></xml>');\n      setIsLevelCompleted(false);\n      return true;\n    },\n\n    // Отметить уровень как пройденный\n    markLevelCompleted: () => {\n      setIsLevelCompleted(true);\n      return true;\n    },\n\n    initAlgorithmConfig: () => {\n      let levelId = localStorage.getItem(`CurrentLevel`);\n      if (!levelId) {\n        levelId = 1\n        localStorage.setItem(`CurrentLevel`, 1);\n      }\n      \n      let xmlConfig = localStorage.getItem(`SavedAlgorithm/Level-${levelId}`);\n      if (!xmlConfig) {\n        localStorage.setItem(`SavedAlgorithm/Level-${levelId}`, '<xml></xml>');\n        xmlConfig = '<xml></xml>';\n      }\n      \n      return xmlConfig;\n    },\n\n    updateAlgorithmConfig: (xmlConfig) => {\n      let levelId = localStorage.getItem(`CurrentLevel`);\n      if (!levelId) {\n        return;\n      }\n      \n      localStorage.setItem(`SavedAlgorithm/Level-${levelId}`, xmlConfig);\n    }\n  };\n\n  const levelUtils = {\n    ...contextUtils,\n    CELL,\n    CELL_SIZE,\n    HALF\n  };\n\n  return (\n    <LevelContext.Provider value={{ \n      grid, \n      setGrid, \n      xmlAlgorithmConfig,\n      isLoading,\n      isLevelCompleted,\n      levelId,\n      ...levelUtils \n    }}>\n      {children}\n    </LevelContext.Provider>\n  );\n}\n\nexport function useLevel() {\n  const context = React.useContext(LevelContext);\n  if (!context) {\n    throw new Error(\"useLevel must be used within LevelProvider\");\n  }\n  return context;\n}\n","/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/components/Onboarding.js",["71","72"],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/state/agentContext.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/three/useAgent.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/three/Map.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/three/Camera.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/components/GestureRecognition.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/utils/indexedDB.js",[],"/Users/akokhanenko/repos/yandex-uchebnik-robots-web/src/state/gestureContext.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":30,"column":10,"nodeType":"79","messageId":"80","endLine":30,"endColumn":20},{"ruleId":"81","severity":1,"message":"82","line":99,"column":17,"nodeType":"83","endLine":99,"endColumn":86},{"ruleId":"81","severity":1,"message":"82","line":106,"column":17,"nodeType":"83","endLine":106,"endColumn":46},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'isEmptyXml' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]